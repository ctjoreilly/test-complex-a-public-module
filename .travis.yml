language: java

jdk:
  - openjdk8

stages:
  - test
  - name: deploy-snapshots
    if: branch = master AND type = push
  - name: release-check
    if: (branch =~ /^release.*/)
  - name: release
    if: (branch =~ /^release.*/)

before_install:
  # Ensure the settings we want to use are in place before running the default mvn install
  - cp ./travis/maven-settings.xml $HOME/.m2/settings.xml

jobs:
  include:
    - stage: test
      script:
        - echo "test"
        - mvn test
      after_failure:
        - echo "\n=== SUREFIRE REPORTS ===\n"
        - for F in target/surefire-reports/*.txt; do echo $F; cat $F; echo; done
    - stage: deploy-snapshots
      script:
        - echo "deploy-snapshots"
        # When push to master occurs, all the versions should be -SNAPSHOTs and we will auto-deploy
        - mvn --batch-mode -e -DskipTests=true deploy
    - stage: release-check
      script:
        - echo "release-check"
        # Ensure we don't have any external SNAPSHOT dependencies
        - mvn --batch-mode release:prepare -DdryRun=true
    - stage: release
      services:
        - docker
      script:
        - echo "release"
        # Git fix based on: https://github.com/sbt/sbt-release/issues/210
        - echo "Fixing git setup for $TRAVIS_BRANCH in preparation for release"
        - git checkout ${TRAVIS_BRANCH}
        - git branch -u origin/${TRAVIS_BRANCH}
        - git config branch.${TRAVIS_BRANCH}.remote origin
        - git config branch.${TRAVIS_BRANCH}.merge refs/heads/${TRAVIS_BRANCH}
        # Perform mvn release steps
        - mvn --batch-mode release:prepare -DtagNameFormat="v@{project.version}"-DscmCommentPrefix="[maven-release-plugin][skip travis]" # NOTE: this stop's travis from building based on the tag's commit/push.
        - mvn --batch-mode release:perform
        # Release Docker Image(s)
        - echo "Docker image(s) release steps"
        - echo "$DOCKER_API_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - cd ./target/checkout # Use the 'mvn release:perform' checkout to construct the docker images, so that we are using the same artifacts/versions as deployed to the maven repository
        # Build the example 'ctjoreilly/test-complex-public-module'-app-a docker image
        - cd ./app-a/target
        - cp ./classes/Dockerfile .
        - cp ./classes/docker-*.sh .
        - chmod 764 *.sh
        - ./docker-build.sh
        - ./docker-push.sh